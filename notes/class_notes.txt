EDA C1
	- Conocer las estructuras de datos
	- Comprender las bases teoricas
	- Habilidades para dise;ar las ED
	- Normas de juegos

	conjunto de datos de busqueda
	imagenes
	computacion grafica


	DS
		Conjunto de normas

	Arquitectura Von Neumann
		Ordenar los datos siguen los patrones de la arquitectura de las computadoras

	Aplicacion
		Buscador de palabras
		Mapas
		Modelado 3D(perro)
			Manejo de mallas
			Metodo de la mariposa
		Videojuegos
			Bluckster
			WOW
		Buscador de imagenes (gatos)
			Metodos Hancraft
			Encoder/Decoder

	La maldicion de dimensionalidad
		Complejidad de los algoritmos
			Aumento exponencial
		Similaridad sufre

	Geometria + Algebra Lineal + Probabilidades
	Canal de Veritasium (4 cosas para ser un experto)
		Repetir algo
		Practicar en el borde del conocimiento

	What if?

	EDA -> Teoria + Algoritmos

	Implementar
		Voronoi
			Triangulizacion de Delaunay
			Poligonos de Thiessen
		Shazam
		RTree
		BSP


	Teoria
		Miercoles 
			Quizzes de 10 minutos
	Laboratorio
		Lunes
		Jueves
			Laboratorios individuales
				Multidimensionales
					Mapas
					3D
			Presentacion de paper
				Como si fueran autores
			Proyecto de fin de curso
				Implementacion del paper


	B, B+, RangeTree
	QuadTree
		Point-QuadTree
			...

	Colision: 
		2 objetos se solapan
		2 objeos que comparten un mismo espacio

	Problema que se ocurre -> Problema que viene en el examen

	R Tree
	Dynamic Hilbert R Tree
	R* Tree

	Incentivar a partir de la comprension, generalizar
		deduccion a partir de la teoria

	ESTRUCTURAS DE DATOS
		Eficientes en tiempo y espacio

		Lineales -> LinkedList, Heap
			Estaticas: array,
			Dinamicas: vector, en memoria
		NoLineales -> Grafos
			Todo lo xvre esta aca


		Propiedades
			Eficiencia en tiempo y espacio
			Dinamicas


	Problema por solapamiento
		"Solapamiento malo" el curso


		STree
		Voronoi multidimensional

	Repasar B, B+, Range Tree


EDA C2
	Preludio
		B 			RAM
		B+ Tree     ROM


	Un nodo no hoja puede tener 2 hijos con un page size de 10
		Raiz -> Si
		Interna -> No

	Space Filling
		Codificacion del espacio
		Z order
		Heaper order
			propiedades de adyacencia

		"Por supervivencia lo van a hacer mas rapido"
		"Esta hecho para 2 horas"

		En un B+Tree, estan todos los numeros arriba?


	Range Tree -> Framework
		Range Query
		KNN
			1-NN
		Radius Query
			Breadth-First
			Depth-First

		Ancestro Comun -> de la busqueda por rango
			inorder para ranque queries [l, r]

		Range Tree
			B+ Tree de 1 grado
			encontrar limites superiores e inferiores y ancestro comun

		Dimensiones
			Euclides
			Coordenadas polares
				Angulo y longitud

				Range Query
					Area del Trapecio Circular, Sector Circular, Corona Circular

			Cilindricas
				Angulo, radio y altura
			Esfericas
				2 angulos y una longitud
			


	Datos multidimensionales
		Mapas
			Distancia entre coordenadas polares
		Big Data
			Datos no relacionales


		Arquitectura Encoder-Decoder
			Dado un espaco latente R^512 (Z)
				Aplicas reduccion de dimensionalidad (PCA, t-SNE, MAP) para hacer la visualizacion

		Cuando se trabaje alta dimensionalidad, se suele aplicar busqueda por similitud
		* Aproximar la similaridad de coseno con una euclidiana (demostracion) * 

		Metodos de Acceso Multidimensional
			Baja dimensionalidad

		Metodos de Acceso Metrico
			Alta dimensionalidad


EDA C3
	Distancia entre mapas
		Desarrollo iniciales orientados en eso
	Eagle
		Hacer todos tu esquemas corresponden a chips integrados
		Buscar cual es la conexion mas corta entre 2 puntos, parecidos entre mapas
	Encaje de piezas

	Retos de datos multidimensionales
		Muchos operadores espaciales no son cerrados
			Dado
				N = {1, 2, 3, 4}
				1 + 2 = 3		Op Cerrada
				1 - 4 = -1		Op No Cerrada

			Operadores relacionales
				Comparacion de objetos

	Clasificacion por localizacion
		Main Memory Structures
			KD-Tree
			BSP-Tree
			BD-Tree
			QuadTree

		External Memory Structures
			MOLHPE


	Clasificacion por Metodo de Acceso
		PAM(Point Access Method)
		SAM(Spatial Access Method)

	Clasificacion por Tipo de Particion
		Space-Driven
		Data-Drive

	Requerimientos
	1
	2
	3
	4

	Queries
		Point Query
		Range Query
		Region Query


	Puntos limites(caen en las lineas de las particiones)
		Pueden llegar a tener limites inutiles

	QuadTree
		Construcion balanceada RETO
		Eliminacion


EDA C4
	Range Query
		Donde hay interseccion buscas los puntos y te fijas si esta dentro del region de busqueda (x1, y1) (x2, y2)


	eje con varianza menor
		matriz de covarianza
    

EDA C5
	PR QuadTree
		Division en funcion del espacio con la misma escala
			64 * 64 -> 32 * 32 -> 16 * 16
		Overlapping de puntos -> Particion hasta el infinito
			En el caso de overlapping se suele establecer un tama;o minimo de hoja y de ahi listar los elementos en las hojas

		Gasta mucha memoria creando nodos imaginarios

	Bucket PR QuadTree
		Varios elementos por cada nodo
			Capacidad maxima
			Permite menos particiones
				Util para colisiones

		Es mas facil trabajar con objetos puntuales
			Para personas es mas facil trabajar con cajas, paralelepipedos
		Condiciones de frontera con vecinos

		Forma vanilla
			Que pasa si se chocan 2 puntos de esquinas
			Usar areas


	xmin <= log2(a) <= xmax
	ymin <= log2(a) <= ymax
		
		Spread concepto
	
	Compressed QuadTrees
		Usar etiquetas para la profundidad
	
	Point -> PR -> RegionQuadTree

	Region QuadTree
		Nodos grises
			Sus hijos tienen data
		Nodos blancos
			No tiene data
		Nodos negros
			Tienen data

		Aplicaciones en fisica
			Pasas del todos contra todos a cuadriculas
			Orden de Healer

		Operaciones entre los arboles del Region QuadTree
		Comprension
			Perder informacion
			Ganar niveles(bajar en el arboles)



Dado 2 puntos (x1, y1) , (x2, y2) calcule cual es la altura del PR-Quadtree

Sea l el lado de la region del PR-QuadTree, 
	x_min = min(x1, y2)
	y_min = min(y1, y2)

	x_max = max(x1, y2)
	y_max = max(y1, y2)

Se sabe que basta que se haya una linea divisoria en alguno de los ejes para que los puntos se separen y se termine de hacer los split.
Entonces existe un punto de corte en alguno de los ejes tal que
	x_min <= punto_corte <= x_max
	y_min <= punto_corte <= y_max
	...

Entonces visto desde el punto de vista de un eje 
	la altura del PR-QuadTree seria el numero de pasos que toma 
	el binary search en encontrar un numero mayor igual que el minimo en el eje y menor igual que el maximo en el eje.

Finalmente tomamos el minimo entre las alturas de todos los ejes, diferentes de 0.


C7
	Boid algorithm
		Separation
		Alingment
		Cohesion

	Vector
		Direccion
		Modulo
	Vector unitario
	Coordenadas polares
	
C8
		QuadTree/Octree
			Mucho desperdicio de espacio dado que se generan 4 espacios por cada

		Point/ QuadTree -> data driven
		PointRegion -> divisiones equidistante

	2 familias: cortes guiados por puntos/guiados por "otras cositas"

	Point KD-Tree
		cortes en x, y, z, w, u by loop

		convencion < >=

		Como no es un arbol balanceado la busqueda en complejidad 'log' no es estable

		Median-split KD-Tree
	
	Modelado de mallas

	Modelado volumetrico
		voxels(la version de 3 dimensiones de 1 pixel)
		NeRF	

	Puede cambiar la ubicacion del eje por molestar

	Delete: 
		2 reglas
		complejidad: O(h * # nodos de un sub arbol a profundidad d con altura h)

	Variantes de KD-Tree
		Median-split-KD-Tree
			IID -> que pasa si tenemos clusters?
			Partir en el eje con mayor rango

		Adaptative-KD-Tree
			Varianza
				Eje con mayor varianza
					Varianza de las distancias
		Fair-split-KD-Tree
		L = Var(G_left) + Var(G_right) + |C(G_left) - C(G_right)|


C9
	BSP-Tree
		mx + b = y
		ecuacion de la recta -> vectorialmente
		dada una recta L como 
			determinas si los puntos estan en lados opuestos
		proyeccion de un vector sobre una recta
			modulo * direccion
				a. b / ||a|| ||b|| * a/||a||
		similaridad de coseno
		vector normal
			vector perpendicular a la recta
				forma una base canonica
		como definir la recta entre un punto, vector y vector normal

		el vector normal define un lado positivo y un lado negativo en el plano
		hiperplano

		generalizacion del KDtree con cortes no necesariamente paralelos a los ejes
			depende ^ k
			calcular la interseccoin entre poligonos
		ray tracing relacionado con pong

		Painter's algorithm

		
C10
	producto punto
	producto vectorial
	regla de la mano derecha
	algoritmo para saber figura convexa o no convexa
		el signo se va a mantener
		else
			por ahi no va a cambiar el signo
	producto cruz de todos los lados, con eso se sabe si es convexo o no convexo

	con producto cruz
		como saber a que lado esta un punto


	voxel -> pixel en 3 dimensiones

	"depende"

	GridFile
		atributo
		problema de grandes archivos  
			-> no puedes meter todo a RAM
			-> recorrido en RAM

		Grid
			Grid Cell
			Buckets
		
		Las particiones se hacen en las medianas
		granularidad
			muchos buckets igualmente distribuidos

		KBTree
		KDBTree

	EXCELL
		variante de GridFile
		no guarda particiones de los ejes

		k^N

		si partimos 7 veces el EXCELL
			cual es el buddy


		dado n cortes y K dimensiones
			ubique la posicion del elemento C



B-Tree
B+Tree
Range Tree
Point QuadTree
PointRegion QuadTree
    BucketPR
Compresed QuadTree
Region QuadTree
KD-Tree
BSP-Tree
GridFile
EXCELL


C11	
	Tree Directory Methods
		son estructuras curiosas
	
	K-d-B Tree
		Kevin De Bruyne Tree
		cajitas con puntitos
		cajitas que tienen cajitas en una linea recta
		arbol de arboles

		Propagacion hacia abajo
		Propagacion hacia arriba

	LSD Tree
		archivos grandes
		Local Split Decision

	hB Tree
		el arbol que estaba mal graficado

		

C12
	LSD Tree y HB Tree soluciona el problema del KdB Tree
	particion 1/3 2/3 -> demostracion

	RTree
		Cartografia
		Tiene muchas variantes
			Implementacion
		Principal enemigo
			Overlapping
		
		El anillo unico
		Gravity Falls
			Minimum bounding box
		Todo se basa del BTree, BST
		BTree por cajas

		el algoritmo de construccion del R-Tree tiene como objetivo minimizar la suma de areas o perimetros de todos los MBB
		Minimizar el perimetro
			media armonica
			media geometrica

			demostrar
		ver problemas 2 dimensionales en 1
		K-Means

		Linear split
			seleccione 2 objetos como semillas
			

C13
Distancia entre objeto y punto
Distancia entre objeto y objeto

Distancia entre punto y recta(vector normal/perpendicular)
	Zona A, Zona B, Zona VIP
Branch and Bound
	Distancia al rectangulo del RTree
		Bajar por el que tiene la menor distancia
Best First
	Bajas por tu priority_queue
	

C14
	Representacion de objetos
		Representacion de objetos espaciales
			Dividir el objeto
			Una malla, un conjunto de puntos, una propiedad en cada posicion del espacio, separar la definicion de caras
			Separar el objeto geometrico en cara, vertice, arista
		
			Object based decomposition
			Image based decomposition

			Location query
				Retorna objeto
			Feature query
				En que ubicacion se encuentra una rosa
				Retorna posicion
			Pixel/Voxel

			Starcraft

			De analogico a digital
		Interior-Based Representations
			Como dividir el espacio
				Triangulos, Hexagonos
			Representacion Explicita
				Lista de posiciones
			Representacion Implicita
				Linkear cada celda

			Celdas y mosaicos
			Poligonal
				Atomic
					Regular (equilatero [angulos y lados])
					Tipos de particiones regulares
					[4^4] [3^6] [6^3]

					isoedricos
						equivalentes en el mismo grupo de simetria

						triangulos isoedricos
						trapecios no-isoedricos
					limitado/ilimitado
						si pones una recta encima de una arista y siempre cruza vertices y aristas es ilimitado
					adyacencia uniforme
						arista o vertice vecino
						2
						3
						7
						para el quiz
						1
				Molecular
			NoPoligonal
		Boundary-Based Representations
		Space-filling curves

C15
	Phillip Cantor
		Equivalencia de infinitos
			R1, R2 misma cantidad de puntos
			Mapear entre un conjunto y otro (isomorfico)
			Correspondencia entre espacio R1 y R2
	Peano
		Funcion continua y q no se corte
		Relacionar cuadrado con una recta
		Fractales
			Mates Mike: El Copo de Nieve de Koch
			3Blue1Brown
		Llenar un infinito con otro infinito
		Mapear espacios continuos en 1 plano
	Hilbert
		Laplace, Z, Fourier
		e^(i * pi) = 1
		e^(i * theta)
	Moore
	Morton 
		Curve

	ab op cd = acbd
	binary -> grey
	grey -> binary

	z-order -> xy
	xy -> z-order